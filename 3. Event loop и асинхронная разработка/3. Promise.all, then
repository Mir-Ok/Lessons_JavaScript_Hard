Запускаем несколько асинхронных операций. Например, отправить сразу три запроса к серверу,
сформировать единый ответ. Чтобы не ждать - параллелим при помощи асинхронности

// функция получения ответа в нужном формате
async function fetchJson(url) {
    const res = await fetch(url)
    // дожидаемся полной загрузки
    return await res.json()
}

async function getPostdata(id) {
    // пока что мы ждем каждый ответ отдельно
    /* 
    const post = await fetchJson(`/api/posts/${id}`);
    const comments = await fetchJson(`/api/posts/${id}/comments`);
    const profile = await fetchJson(`/api/profile`);
    return { post, comments, profile} 
    */
    // перепишем асинхронно? дожидаемся сразу трех
    const [post, comments, profile] = await Promise.all([
        fetchJson(`/api/posts/${id}`),
        fetchJson(`/api/posts/${id}/comments`),
        fetchJson(`/api/profile`),
    ]);
    return { post, comments, profile} 
}

// перепишем так, чтобы вообще не использовать async/await 

// функция получения ответа в нужном формате
function fetchJson(url) {
    // метод выполняет действие после разрешения промиса
    // вернется тоже просим, итого связка
    return fetch(url).then(res => res.json());
};

function getPostdata(id) {
    // перепишем асинхронно? дожидаемся сразу трех
    return Promise.all([
        fetchJson(`/api/posts/${id}`),
        fetchJson(`/api/posts/${id}/comments`),
        fetchJson(`/api/profile`),
    ]).then(([post, comments, profile]) => {
        return { post, comments, profile} 
    });    
}

// если описанную функцию просто вызвать, она просто вернет то, что в return
(async ()=> {
    const data = await getPostdata(1)
})();

/*

Все асинхронные функции возвращают Promise

Они могут передавать результат работы друг другу

Возможно несколько операций одновременно Promise.all

*/

// загрузка скриптов
new Promise(resolve => {
    const script = document.createElement('script');
    script.src = './script.js';
    document.head.append(script)
    script.addEventListener('load', () => resolve());
})
