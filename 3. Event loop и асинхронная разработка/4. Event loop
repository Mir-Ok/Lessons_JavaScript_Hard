Яваскрипт - однопоточный, использует одно ядро процесора
Java, Go могут использовать несколько ядер

Асинхронные операции осуществляются только тогда, когда ядро бездействует

(async () => {
  const result = await fetch('/app/$users');
  const json = await result.json();
  console.log(json);
})();

Яваскрипт разделить код на две части: то, что выполнится здесь и сейчас (await, отправка
запроса) и потом (когда сервер начнет отправлять ответ).
Между этими операциями он бездействует.
Когда сервер начинает отправлять ответ, Яваскрипт получает сигнал работать дальше и
вызывает функцию, которая дожидается получения всего тела ответа.
Пока ждет, снова засыпает.
Когда ответ получен, он просыпается и начинает синхронно получать json
остаток функции выполнится сразу после получения объекта.
Как только выведет в консоль, то снова заснет
Но так как время ожидание очень маленькое, это незаметно

Цикл событий - это последовательность операций, не путаем с событиями браузера.

Event loop - как техподдержка, пока звонков нет - ждет.
Когда звонок поступает - начинает работать.
Это можно сравнить с синхронным выполнением задачи

Если решить не может сам - передает старшим и берется за следующую задачу.
Когда получает помощь - возвращается к клиенту с ответом.
Это похоже на асинхронное выполнение, так как мы не ждем завершения одной задачи, чтобы
начать новую

--------------------------------

Макрозадачи - выполнение синхронного кода, внутренние задачи движка, setInterval/Timeout
Выполняются по очереди

Микрозадачи - могут быть порождены только нашим кодом, разрешение Промисов, вызов кода после await
Выполняются сразу после завершения макрозадачи, пока очередь не опустеет из микро - макро не возьмет

Сравним с уборкой: макрозадача - помыть пол.
Чтобы осуществить - микрозадачи - убрать всякое с пола. И в конце снова все расставить.
Не начнем мыть посуду, пока не закончим с возвращением вещей на место

----------------------------------

Примеры 1

console.log('1')
setTimeout(() => console.log('4'));
queueMicrotask(() => console.log('3'));
console.log('2')

Сначала асинхронные вызовы, макрозадачи
Потом микрозадача
Потом отложенная макрозадача


Пример 2

console.log('1')
setTimeout(() => console.log('6'));
const promise = new Promise(resolve => {
   console.log('2');
   resolve();
   });
promise.then(() => console.log('4'));
queueMicrotask(() => console.log('5'));
console.log('3')


Пример 3

console.log('1')
setTimeout(() => console.log('6'));
(async () => {
   const promise = new Promise(resolve => {
     console.log('2');
     resolve();
     });
     await promise;
     console.log('4');
})();
queueMicrotask(() => console.log('5'));
console.log('3')

