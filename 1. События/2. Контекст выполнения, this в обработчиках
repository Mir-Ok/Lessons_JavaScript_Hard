Контекст выполнения - тот набор переменных и констант, 
который доступен нам в определенном месте кода (в текущей или родительской ОВ).

- window виден везде
- let внутри своего и дочерних слоков

Ранее мы рассматривали this только в конетксте объектов и их методов:

const me = {
  name: 'Ivan',
  whoAmI() {
  console.log(this.name); // берет свойство из объекта, внутри которого используется
  }
}

-----------------------------
Как задать значение this вручную?

1. Если просто так к нему обратиться - он превратится в window
2. Назначить при помощи методов call, apply, bind

Например, создадим самую простую функцию, которая выводит на печать и только:

function logThis() {
  console.log(this)
}

logThis() // вернет window
logThis.call(42) // вернет 42

3. Можем переопределить this даже для уже имеющих его:

const me = {
  name: 'Ivan',
  whoAmI() {
  console.log(this.name);  
  }
};

const notMe = {
  name: 'Not Ivan'
}

me.whoAmI.call(notMe)  // вызываем метод одного объекта, но со свойствами другого объекта

4. Помним про ограничение у стрелочных функций!

--------------------------------------

this позволяет нам использовать один обработчик для разных мест 
и хранить для каждого свой контекст
К какому объекту функцию вызвали, тот контекст и берет

function onButtonClick() {
  // просто увеличиваем значение на 1
  this.textContent = String(Number(this.textContent) + 1);
}

// Создаем несколько кнопок и каждой свой обработчик
for (let i=0; i<5;++i) {
  const btn = document.createElement('button');
  btn.textContent = '1';
  document.body.append(btn);
  btn.addEventListener('click', onButtonClick);
}  
