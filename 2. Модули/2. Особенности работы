Стали стандартом с 2015 года, все браузеры работают с ними

1. Загрузка модулей из других источников
   Важен источник, можем получить его командой window.origin
   Если модуль лежит там же, где и файл - загрузит не вопрос, а если отличается, то
   только при наличии правильных CORS-заголовков (правила как для fetch)
   
   При загрузке локальных модулей браузер воспринимает их как из другого источника, либо как
   вообще без источника, небезопасно. CORS заголовки может отправить только веб-сервер, простое 
   открытие в браузере не сопровождается такими заголовками
   
2. Выполнение после построения.
   Браузер загрузит скрипты сразу, но выполнит после формирования DOM, как скрипты с defer 
   То есть не нужно дожидаться загрузки и прописывать DOMContentLoaded и сразу выполнять,
   вес равно запустится только после

3. Изолированная область видимости   
   Код словно в изолированной функции, нет смысла использовать IIFE
   Его переменные не попадают в глобальную область видимости
   Но можно присвоить переменной эту возможность window.isModule = 'Да';

4. Модуль можно подключить много раз, но выполнится он всего 1 раз
   Его переменные видны постоянно, это удобно, потому что модули содержат функции
   н не запускают их выполнение
   Entry point - точка входа - можль, с которого начинается водопад выполнения всех связанных
   с ним модулей, точка входа

5. Строгий режим
   this внутри функции равно глобальному объекту - мы это мало используем
   
   
---------------------------------
Подробности:
   
- export        https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/export
- import        https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/import
- строгий режим https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Strict_mode
- localStorage  https://developer.mozilla.org/ru/docs/Web/API/Window/localStorage
- serve         https://www.npmjs.com/package/serve
- modules       https://learn.javascript.ru/modules
